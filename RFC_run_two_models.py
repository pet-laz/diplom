import joblib
import numpy as np
import pandas as pd
from collections import Counter

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö ===
group_clf = joblib.load("group_model.pkl")
from sklearn.ensemble import RandomForestClassifier
all_symptoms = joblib.load("all_symptoms.pkl")
group_encoder = joblib.load("group_encoder.pkl")
df = pd.read_csv("diseases.csv", delimiter=";")

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä ===
# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
group_to_diseases = {}
disease_to_group = {}

for _, row in df.iterrows():
    group = row["GroupName"]
    disease = row["Name"]
    group_to_diseases.setdefault(group, []).append(disease)
    disease_to_group[disease] = group

# === –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥—Å–∫–∞–∑–æ–∫ ===
def filter_diseases(symptoms):
    matches = []
    for _, row in df.iterrows():
        disease = row["Name"]
        disease_symptoms = [str(s).strip().lower() for s in row[3:] if pd.notna(s)]
        if all(symptom in disease_symptoms for symptom in symptoms):
            matches.append(disease)
    return matches

def get_top_symptoms(diseases, exclude):
    counter = Counter()
    for disease in diseases:
        symptoms = df[df["Name"] == disease].iloc[0, 3:]
        symptoms = [str(s).strip().lower() for s in symptoms if pd.notna(s)]
        counter.update(s for s in symptoms if s not in exclude)
    return [s for s, _ in counter.most_common(4)]

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
print("üëã –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Å–∏–º–ø—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∫–∞—à–µ–ª—å'):")
selected_symptoms = []
rejected_symptoms = set()
max_choices = 7
rejection_count = 0

initial = input("üß† –í–∞—à –≤—ã–±–æ—Ä: ").strip().lower()
selected_symptoms.append(initial)

while len(selected_symptoms) < max_choices and rejection_count < 3:
    possible_diseases = filter_diseases(selected_symptoms)
    
    if not possible_diseases:
        print("üòï –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        break

    already_seen = set(selected_symptoms) | rejected_symptoms
    top_suggestions = get_top_symptoms(possible_diseases, already_seen)

    if not top_suggestions:
        print("üîç –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–∏–º–ø—Ç–æ–º–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.")
        break

    print("\nü§î –ö–∞–∫–∏–µ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ –≤—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ?")
    for idx, s in enumerate(top_suggestions, 1):
        print(f"{idx}. {s}")
    print(f"{len(top_suggestions) + 1}. –ù–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö")

    choice = input("üëâ –í–∞—à –≤—ã–±–æ—Ä (–Ω–æ–º–µ—Ä): ").strip()

    if choice.isdigit():
        choice = int(choice)
        if 1 <= choice <= len(top_suggestions):
            selected_symptoms.append(top_suggestions[choice - 1])
        else:
            print("üôÖ –ù–∏ –æ–¥–∏–Ω —Å–∏–º–ø—Ç–æ–º –Ω–µ –ø–æ–¥–æ—à–µ–ª.")
            rejected_symptoms.update(top_suggestions)
            rejection_count += 1
    else:
        print("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!")

# === –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
feature_vector = [1 if s in selected_symptoms else 0 for s in all_symptoms]
X = np.array(feature_vector).reshape(1, -1)

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã ===
predicted_group = group_clf.predict(X)[0]
print(f"\nüìö –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π: {predicted_group}")

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞ ===
filtered_df = df[df["GroupName"] == predicted_group]
filtered_diseases = filtered_df["Name"].tolist()

X_filtered = []
y_filtered = []

for _, row in filtered_df.iterrows():
    disease_symptoms = [str(s).strip().lower() for s in row[3:] if pd.notna(s)]
    features = [1 if s in disease_symptoms else 0 for s in all_symptoms]
    X_filtered.append(features)
    y_filtered.append(row["Name"])

if not X_filtered:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∏–∞–≥–Ω–æ–∑ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.")
else:
    # –û–±—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –Ω–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–µ –¥–∏–∞–≥–Ω–æ–∑–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    temp_clf = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=42)
    temp_clf.fit(X_filtered, y_filtered)
    disease_prediction = temp_clf.predict(X)[0]
    print(f"ü©∫ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –¥–∏–∞–≥–Ω–æ–∑: {disease_prediction}")