import joblib
import numpy as np
import pandas as pd
from collections import Counter

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö ===
clf = joblib.load('trained_model.pkl')
all_symptoms = joblib.load('all_symptoms.pkl')

# –ß—Ç–µ–Ω–∏–µ CSV
df = pd.read_csv("diseases.csv", sep=';')
group_names = set(df['GroupName'].dropna().str.strip().str.lower())

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π:
# –±–æ–ª–µ–∑–Ω—å ‚Üí [—Å–∏–º–ø—Ç–æ–º—ã], –±–æ–ª–µ–∑–Ω—å ‚Üí –≤—Ä–∞—á
disease_symptoms = {}
disease_doctor = {}

for _, row in df.iterrows():
    name = row['Name'].strip()
    doctor = str(row['DoctorName']).strip()
    symptoms = [str(s).strip().lower() for s in row[3:] if pd.notna(s)]
    
    disease_symptoms[name] = symptoms
    disease_doctor[name] = doctor

# === –§—É–Ω–∫—Ü–∏–∏ ===

def filter_diseases(symptoms):
    return [d for d in disease_symptoms if all(s in disease_symptoms[d] for s in symptoms)]

def get_top_symptoms(disease_list, known_symptoms, n=4):
    counter = Counter()
    for d in disease_list:
        for s in disease_symptoms[d]:
            s_lower = s.strip().lower()
            if s_lower not in known_symptoms and s_lower not in group_names:
                counter[s_lower] += 1
    return [s for s, _ in counter.most_common(n)]

def predict_disease(selected_symptoms):
    user_features = [1 if symptom in selected_symptoms else 0 for symptom in all_symptoms]
    user_features = np.array(user_features).reshape(1, -1)

    try:
        proba = clf.predict_proba(user_features)[0]
    except ValueError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
        return

    proba = np.nan_to_num(proba, nan=0.0)
    disease_proba = sorted(zip(clf.classes_, proba), key=lambda x: x[1], reverse=True)

    print("\nüåü –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –≤—Ä–∞—á–∏:")
    for disease, probability in disease_proba[:3]:
        doctor = disease_doctor.get(disease, "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        print(f"- {disease} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {round(probability * 100, 2)}%) ‚Äî –≤—Ä–∞—á: {doctor}")

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===

selected_symptoms = []
rejected_symptoms = set()
rejection_count = 0
max_choices = 7

possible_diseases = list(disease_symptoms.keys())

print("\nüëã –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Å–∏–º–ø—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∫–∞—à–µ–ª—å'):")
initial = input("üß† –í–∞—à –≤—ã–±–æ—Ä: ").strip().lower()
selected_symptoms.append(initial)

while len(selected_symptoms) < max_choices and rejection_count < 3:
    possible_diseases = filter_diseases(selected_symptoms)
    
    if not possible_diseases:
        print("üòï –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        break

    already_seen = set(selected_symptoms) | rejected_symptoms
    top_suggestions = get_top_symptoms(possible_diseases, already_seen)

    if not top_suggestions:
        print("üîç –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–∏–º–ø—Ç–æ–º–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.")
        break

    print("\nü§î –ö–∞–∫–∏–µ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ –≤—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ?")
    for idx, s in enumerate(top_suggestions, 1):
        print(f"{idx}. {s}")
    print(f"{len(top_suggestions) + 1}. –ù–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö")

    choice = input("üëâ –í–∞—à –≤—ã–±–æ—Ä (–Ω–æ–º–µ—Ä): ").strip()

    if choice.isdigit():
        choice = int(choice)
        if 1 <= choice <= len(top_suggestions):
            selected_symptoms.append(top_suggestions[choice - 1])
        else:
            print("üôÖ –ù–∏ –æ–¥–∏–Ω —Å–∏–º–ø—Ç–æ–º –Ω–µ –ø–æ–¥–æ—à–µ–ª.")
            rejected_symptoms.update(top_suggestions)
            rejection_count += 1
    else:
        print("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!")

# === –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ ===

valid_selected = [s for s in selected_symptoms if s in all_symptoms]

if valid_selected:
    print("\nüìÑ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:")
    for symptom in valid_selected:
        print(f"- {symptom}")
    predict_disease(valid_selected)
else:
    print("üö´ –ù–∏ –æ–¥–∏–Ω –∏–∑ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
