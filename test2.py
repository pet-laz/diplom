import pandas as pd
from sklearn.tree import DecisionTreeClassifier
import numpy as np

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –±–æ–ª–µ–∑–Ω–µ–π
data = pd.read_csv("diseases.csv", delimiter=";")

# –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤
all_symptoms = []
for i in range(3, data.shape[1]):
    all_symptoms += data.iloc[:, i].dropna().tolist()
all_symptoms = sorted(list(set(all_symptoms)))

# –°–æ–∑–¥–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
X = []
y = []

for idx, row in data.iterrows():
    disease_symptoms = row[3:].dropna().tolist()
    features = [1 if symptom in disease_symptoms else 0 for symptom in all_symptoms]
    X.append(features)
    y.append(row.iloc[0])

# –û–±—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π
clf = DecisionTreeClassifier()
clf.fit(X, y)

# ----------- –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ ------------

print("üëâ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Å–∏–º–ø—Ç–æ–º –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö–∞—à–µ–ª—å, –ë–æ–ª—å –≤ –≥–æ—Ä–ª–µ):")
first_symptom = input("–í–∞—à —Å–∏–º–ø—Ç–æ–º: ").strip()

selected_symptoms = [first_symptom]

# –£–±–∏—Ä–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
remaining_symptoms = [s for s in all_symptoms if s.lower() != first_symptom.lower()]

print("\nüìã –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:")

batch_size = 4  # —Å–∫–æ–ª—å–∫–æ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞ —Ä–∞–∑
index = 0

while index < len(remaining_symptoms):
    current_batch = remaining_symptoms[index:index+batch_size]
    for idx, symptom in enumerate(current_batch, 1):
        print(f"{idx}. {symptom}")
    print(f"{len(current_batch)+1}. –ù–ò –û–î–ò–ù –ò–ó –°–ò–ú–ü–¢–û–ú–û–í –ù–ï –ü–û–î–•–û–î–ò–¢")

    user_choice = input("–í–∞—à –≤—ã–±–æ—Ä (–Ω–æ–º–µ—Ä): ")

    if not user_choice.isdigit():
        print("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.")
        continue

    user_choice = int(user_choice)

    if 1 <= user_choice <= len(current_batch):
        chosen_symptom = current_batch[user_choice-1]
        selected_symptoms.append(chosen_symptom)
        print(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {chosen_symptom}")
    elif user_choice == len(current_batch) + 1:
        print("‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ø–∏—Å–∫—É —Å–∏–º–ø—Ç–æ–º–æ–≤.")
    else:
        print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        continue

    index += batch_size  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–µ —Å–∏–º–ø—Ç–æ–º–æ–≤

print("\nüìÑ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:")
for symptom in selected_symptoms:
    print(f"- {symptom}")

# –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω–æ–π –≤–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
user_features = [1 if symptom in selected_symptoms else 0 for symptom in all_symptoms]
user_features = np.array(user_features).reshape(1, -1)

# –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –∫–ª–∞—Å—Å–∞–º
proba = clf.predict_proba(user_features)[0]

# –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ–ª–µ–∑–Ω–µ–π —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
disease_proba = list(zip(clf.classes_, proba))
disease_proba.sort(key=lambda x: x[1], reverse=True)  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É–±—ã–≤–∞–Ω–∏—é

# –í—ã–≤–æ–¥–∏–º –¢–æ–ø-3
print("\nüåü –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –±–æ–ª–µ–∑–Ω–∏:")

for disease, probability in disease_proba[:3]:
    print(f"- {disease} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {round(probability * 100, 2)}%)")
