import joblib
import pandas as pd
import numpy as np
import random

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
NUM_TESTS_PER_DISEASE = 20     # –ö–æ–ª-–≤–æ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—É—é –±–æ–ª–µ–∑–Ω—å
MIN_MODIFICATIONS = 1          # –ú–∏–Ω–∏–º—É–º –∏–∑–º–µ–Ω—è–µ–º—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤
MAX_MODIFICATIONS = 3          # –ú–∞–∫—Å–∏–º—É–º –∏–∑–º–µ–Ω—è–µ–º—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö ===
clf = joblib.load("trained_model.pkl")
all_symptoms = joblib.load("all_symptoms.pkl")
df = pd.read_csv("diseases.csv", delimiter=";")

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
disease_symptom_map = {}
for _, row in df.iterrows():
    disease = row["Name"]
    symptoms = [str(s).strip().lower() for s in row[3:] if pd.notna(s)]
    disease_symptom_map[disease] = symptoms

# === –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
total_tests = 0
correct_predictions = 0
test_examples = []

for disease, original_symptoms in disease_symptom_map.items():
    for _ in range(NUM_TESTS_PER_DISEASE):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        saved_original = original_symptoms.copy()
        modified_symptoms = saved_original.copy()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        max_allowed_mods = min(MAX_MODIFICATIONS, len(modified_symptoms))
        if max_allowed_mods < MIN_MODIFICATIONS:
            continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–ø—Ç–æ–º–æ–≤

        num_modifications = random.randint(MIN_MODIFICATIONS, max_allowed_mods)

        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–º–µ–Ω–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤
        for _ in range(num_modifications):
            if modified_symptoms:
                to_change = random.choice(modified_symptoms)
                modified_symptoms.remove(to_change)
                # 50% —à–∞–Ω—Å –∑–∞–º–µ–Ω–∏—Ç—å —É–¥–∞–ª—ë–Ω–Ω—ã–π —Å–∏–º–ø—Ç–æ–º –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π –¥—Ä—É–≥–æ–π
                if random.random() < 0.5:
                    substitute = random.choice([s for s in all_symptoms if s not in modified_symptoms])
                    modified_symptoms.append(substitute)

        # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–∏–º–ø—Ç–æ–º–æ–≤
        features = [1 if symptom in modified_symptoms else 0 for symptom in all_symptoms]
        X = np.array(features).reshape(1, -1)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = clf.predict(X)[0]

        test_examples.append({
            'disease': disease,
            'original': saved_original,
            'modified': modified_symptoms,
            'predicted': prediction,
            'correct': prediction == disease
        })

        if prediction == disease:
            correct_predictions += 1
        total_tests += 1

# === –†–µ–∑—É–ª—å—Ç–∞—Ç ===
accuracy = correct_predictions / total_tests * 100
print(f"\nüìä –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å–∫–∞–∂—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {accuracy:.2f}% ({correct_predictions} –∏–∑ {total_tests})")

count_random_examples = 3

print(f"\nüîé –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤ ({count_random_examples} —Å–ª—É—á–∞–π–Ω—ã—Ö):")
for example in random.sample(test_examples, min(count_random_examples, len(test_examples))):
    status = "‚úÖ" if example['correct'] else "‚ùå"
    print(f"{status} {example['disease']}:")
    print(f"    –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã: {', '.join(example['original'])}")
    print(f"    –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:  {', '.join(example['modified'])}")
    print(f"    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:  {example['predicted']}\n")
